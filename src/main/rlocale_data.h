/*
 *  R : A Computer Language for Statistical Data Analysis
 *  Copyright (C) 2005-2020   The R Core Team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, a copy is available at
 *  https://www.R-project.org/Licenses/
 */

/* Data for replacement iswxxxxx functions used only on
   Windows, macOS and AIX

   It is not clear how they were originally derived when contributed
   by Ei-ji Nakama.  Sources for updating include the Unicode tables;

   https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
   (described in http://www.unicode.org/L2/L1999/UnicodeData.html)
   
   with the help of Marcus Kuhn's 'uniset' Perl script
   (https://www.cl.cam.ac.uk/~mgk25/download/uniset.tar.gz: update the
   tables it contains to current Unicode) and some ideas are mentioned
   in the comments.

   Or look at the glibc sources (data in localedata/unicode-gen).
   That generates a file i18n_ctype via a Python script gen_unicode_ctype.py.
 */

/* ------------------- iswalpha -------------------- */
/* The C99 standard defines this as

   'any wide character for which iswupper or iswlower is true, or any
   wide character that is one of a locale-specific set of alphabetic
   wide characters for which none of iswcntrl, iswdigit, iswpunct, or
   iswspace is true'

   iswalnum is derived in rlocale.c

   Something like 
   uniset +cat=Lu +cat=Ll +cat=Lt +cat=Lo +cat=Nd -0030..0039 c

   glibc has 

   'Alphabetic' in DERIVED_CORE_PROPERTIES[code_point])
   or
   # Consider all the non-ASCII digits as alphabetic.
   # ISO C 99 forbids us to have them in category “digit”,
   # but we want iswalnum to return true on them.
   (UNICODE_ATTRIBUTES[code_point]['category'] == 'Nd'
   and not (code_point >= 0x0030 and code_point <= 0x0039)))
*/
static const struct interval table_walpha[] = {
    { 0x41, 0x5a },
    { 0x61, 0x7a },
    { 0xaa, 0xaa },
    { 0xb5, 0xb5 },
    { 0xba, 0xba },
    { 0xc0, 0xd6 },
    { 0xd8, 0xf6 },
    { 0xf8, 0x220 },
    { 0x222, 0x233 },
    { 0x250, 0x2ad },
    { 0x2b0, 0x2b8 },
    { 0x2b9, 0x2ba }, // added in 4.1.0
    { 0x2bb, 0x2c1 },
    { 0x2d0, 0x2d1 },
    { 0x2e0, 0x2e4 },
    { 0x2ee, 0x2ee },
    { 0x345, 0x345 },
    { 0x37a, 0x37a },
    { 0x386, 0x386 },
    { 0x388, 0x38a },
    { 0x38c, 0x38c },
    { 0x38e, 0x3a1 },
    { 0x3a3, 0x3ce },
    { 0x3d0, 0x3f5 },
    { 0x400, 0x481 },
    { 0x48a, 0x4ce },
    { 0x4d0, 0x4f6 }, // add 4f6 in 4.1.0
    { 0x4f8, 0x4f9 },
    { 0x500, 0x50f },
    { 0x531, 0x556 },
    { 0x559, 0x559 },
    { 0x561, 0x587 },
    { 0x5d0, 0x5ea },
    { 0x5f0, 0x5f2 },
    { 0x621, 0x63a },
    { 0x640, 0x64a },
    { 0x660, 0x669 },
    { 0x66e, 0x66f },
    { 0x671, 0x6d3 },
    { 0x6d5, 0x6d5 },
    { 0x6e5, 0x6e6 },
    { 0x6f0, 0x6fc },
    { 0x710, 0x710 },
    { 0x712, 0x72c },
    { 0x780, 0x7a5 },
    { 0x7b1, 0x7b1 },
    { 0x905, 0x939 },
    { 0x93d, 0x93d },
    { 0x950, 0x950 },
    { 0x958, 0x961 },
    { 0x966, 0x96f },
    { 0x985, 0x98c },
    { 0x98f, 0x990 },
    { 0x993, 0x9a8 },
    { 0x9aa, 0x9b0 },
    { 0x9b2, 0x9b2 },
    { 0x9b6, 0x9b9 },
    { 0x9dc, 0x9dd },
    { 0x9df, 0x9e1 },
    { 0x9e6, 0x9f1 },
    { 0xa05, 0xa0a },
    { 0xa0f, 0xa10 },
    { 0xa13, 0xa28 },
    { 0xa2a, 0xa30 },
    { 0xa32, 0xa33 },
    { 0xa35, 0xa36 },
    { 0xa38, 0xa39 },
    { 0xa59, 0xa5c },
    { 0xa5e, 0xa5e },
    { 0xa66, 0xa6f },
    { 0xa72, 0xa74 },
    { 0xa85, 0xa8b },
    { 0xa8d, 0xa8d },
    { 0xa8f, 0xa91 },
    { 0xa93, 0xaa8 },
    { 0xaaa, 0xab0 },
    { 0xab2, 0xab3 },
    { 0xab5, 0xab9 },
    { 0xabd, 0xabd },
    { 0xad0, 0xad0 },
    { 0xae0, 0xae0 },
    { 0xae6, 0xaef },
    { 0xb05, 0xb0c },
    { 0xb0f, 0xb10 },
    { 0xb13, 0xb28 },
    { 0xb2a, 0xb30 },
    { 0xb32, 0xb33 },
    { 0xb36, 0xb39 },
    { 0xb3d, 0xb3d },
    { 0xb5c, 0xb5d },
    { 0xb5f, 0xb61 },
    { 0xb66, 0xb6f },
    { 0xb83, 0xb83 },
    { 0xb85, 0xb8a },
    { 0xb8e, 0xb90 },
    { 0xb92, 0xb95 },
    { 0xb99, 0xb9a },
    { 0xb9c, 0xb9c },
    { 0xb9e, 0xb9f },
    { 0xba3, 0xba4 },
    { 0xba8, 0xbaa },
    { 0xbae, 0xbb5 },
    { 0xbb7, 0xbb9 },
    { 0xbe7, 0xbef },
    { 0xc05, 0xc0c },
    { 0xc0e, 0xc10 },
    { 0xc12, 0xc28 },
    { 0xc2a, 0xc33 },
    { 0xc35, 0xc39 },
    { 0xc60, 0xc61 },
    { 0xc66, 0xc6f },
    { 0xc85, 0xc8c },
    { 0xc8e, 0xc90 },
    { 0xc92, 0xca8 },
    { 0xcaa, 0xcb3 },
    { 0xcb5, 0xcb9 },
    { 0xcde, 0xcde },
    { 0xce0, 0xce1 },
    { 0xce6, 0xcef },
    { 0xd05, 0xd0c },
    { 0xd0e, 0xd10 },
    { 0xd12, 0xd28 },
    { 0xd2a, 0xd39 },
    { 0xd60, 0xd61 },
    { 0xd66, 0xd6f },
    { 0xd85, 0xd96 },
    { 0xd9a, 0xdb1 },
    { 0xdb3, 0xdbb },
    { 0xdbd, 0xdbd },
    { 0xdc0, 0xdc6 },
    { 0xe01, 0xe2e },
    { 0xe30, 0xe3a },
    { 0xe40, 0xe45 },
    { 0xe47, 0xe4e },
    { 0xe50, 0xe59 },
    { 0xe81, 0xe82 },
    { 0xe84, 0xe84 },
    { 0xe87, 0xe88 },
    { 0xe8a, 0xe8a },
    { 0xe8d, 0xe8d },
    { 0xe94, 0xe97 },
    { 0xe99, 0xe9f },
    { 0xea1, 0xea3 },
    { 0xea5, 0xea5 },
    { 0xea7, 0xea7 },
    { 0xeaa, 0xeab },
    { 0xead, 0xeb0 },
    { 0xeb2, 0xeb3 },
    { 0xebd, 0xebd },
    { 0xec0, 0xec4 },
    { 0xec6, 0xec6 },
    { 0xed0, 0xed9 },
    { 0xedc, 0xedd },
    { 0xf00, 0xf00 },
    { 0xf20, 0xf29 },
    { 0xf40, 0xf47 },
    { 0xf49, 0xf6a },
    { 0xf88, 0xf8b },
    { 0x1000, 0x1021 },
    { 0x1023, 0x1027 },
    { 0x1029, 0x102a },
    { 0x1040, 0x1049 },
    { 0x1050, 0x1055 },
    { 0x10a0, 0x10c5 },
    { 0x10d0, 0x10f8 },
    { 0x1100, 0x1159 },
    { 0x115f, 0x11a2 },
    { 0x11a8, 0x11f9 },
    { 0x1200, 0x1206 },
    { 0x1208, 0x1246 },
    { 0x1248, 0x1248 },
    { 0x124a, 0x124d },
    { 0x1250, 0x1256 },
    { 0x1258, 0x1258 },
    { 0x125a, 0x125d },
    { 0x1260, 0x1286 },
    { 0x1288, 0x1288 },
    { 0x128a, 0x128d },
    { 0x1290, 0x12ae },
    { 0x12b0, 0x12b0 },
    { 0x12b2, 0x12b5 },
    { 0x12b8, 0x12be },
    { 0x12c0, 0x12c0 },
    { 0x12c2, 0x12c5 },
    { 0x12c8, 0x12ce },
    { 0x12d0, 0x12d6 },
    { 0x12d8, 0x12ee },
    { 0x12f0, 0x130e },
    { 0x1310, 0x1310 },
    { 0x1312, 0x1315 },
    { 0x1318, 0x131e },
    { 0x1320, 0x1346 },
    { 0x1348, 0x135a },
    { 0x1369, 0x1371 },
    { 0x13a0, 0x13f4 },
    { 0x1401, 0x166c },
    { 0x166f, 0x1676 },
    { 0x1681, 0x169a },
    { 0x16a0, 0x16ea },
    { 0x16ee, 0x16f0 },
    { 0x1700, 0x170c },
    { 0x170e, 0x1711 },
    { 0x1720, 0x1731 },
    { 0x1740, 0x1751 },
    { 0x1760, 0x176c },
    { 0x176e, 0x1770 },
    { 0x1780, 0x17b3 },
    { 0x17d7, 0x17d7 },
    { 0x17dc, 0x17dc },
    { 0x17e0, 0x17e9 },
    { 0x1810, 0x1819 },
    { 0x1820, 0x1877 },
    { 0x1880, 0x18a8 },
    { 0x1e00, 0x1e9b },
    { 0x1ea0, 0x1ef9 },
    { 0x1f00, 0x1f15 },
    { 0x1f18, 0x1f1d },
    { 0x1f20, 0x1f45 },
    { 0x1f48, 0x1f4d },
    { 0x1f50, 0x1f57 },
    { 0x1f59, 0x1f59 },
    { 0x1f5b, 0x1f5b },
    { 0x1f5d, 0x1f5d },
    { 0x1f5f, 0x1f7d },
    { 0x1f80, 0x1fb4 },
    { 0x1fb6, 0x1fbc },
    { 0x1fbe, 0x1fbe },
    { 0x1fc2, 0x1fc4 },
    { 0x1fc6, 0x1fcc },
    { 0x1fd0, 0x1fd3 },
    { 0x1fd6, 0x1fdb },
    { 0x1fe0, 0x1fec },
    { 0x1ff2, 0x1ff4 },
    { 0x1ff6, 0x1ffc },
    { 0x2071, 0x2071 },
    { 0x207f, 0x207f },
    { 0x2102, 0x2102 },
    { 0x2107, 0x2107 },
    { 0x210a, 0x2113 },
    { 0x2115, 0x2115 },
    { 0x2119, 0x211d },
    { 0x2124, 0x2124 },
    { 0x2126, 0x2126 },
    { 0x2128, 0x212d },
    { 0x212f, 0x2131 },
    { 0x2133, 0x2139 },
    { 0x213d, 0x213f },
    { 0x2145, 0x2149 },
    { 0x2160, 0x2183 },
    { 0x249c, 0x24e9 },
    { 0x3005, 0x3007 },
    { 0x3021, 0x3029 },
    { 0x3031, 0x3035 },
    { 0x3038, 0x303c },
    { 0x3041, 0x3096 },
    { 0x309d, 0x309f },
    { 0x30a1, 0x30fa },
    { 0x30fc, 0x30ff },
    { 0x3105, 0x312c },
    { 0x3131, 0x318e },
    { 0x31a0, 0x31b7 },
    { 0x31f0, 0x31ff },
    { 0x3400, 0x4db5 },
    { 0x4e00, 0x9fa5 },
    { 0xa000, 0xa48c },
    { 0xac00, 0xd7a3 },
    { 0xf900, 0xfa2d },
    { 0xfa30, 0xfa6a },
    { 0xfb00, 0xfb06 },
    { 0xfb13, 0xfb17 },
    { 0xfb1d, 0xfb1d },
    { 0xfb1f, 0xfb28 },
    { 0xfb2a, 0xfb36 },
    { 0xfb38, 0xfb3c },
    { 0xfb3e, 0xfb3e },
    { 0xfb40, 0xfb41 },
    { 0xfb43, 0xfb44 },
    { 0xfb46, 0xfbb1 },
    { 0xfbd3, 0xfd3d },
    { 0xfd50, 0xfd8f },
    { 0xfd92, 0xfdc7 },
    { 0xfdf0, 0xfdfb },
    { 0xfe70, 0xfe74 },
    { 0xfe76, 0xfefc },
    { 0xff10, 0xff19 },
    { 0xff21, 0xff3a },
    { 0xff41, 0xff5a },
    { 0xff66, 0xffbe },
    { 0xffc2, 0xffc7 },
    { 0xffca, 0xffcf },
    { 0xffd2, 0xffd7 },
    { 0xffda, 0xffdc },
    { 0x10300, 0x1031e },
    { 0x10330, 0x1034a },
    { 0x10400, 0x10425 },
    { 0x10428, 0x1044d },
    { 0x1d400, 0x1d454 },
    { 0x1d456, 0x1d49c },
    { 0x1d49e, 0x1d49f },
    { 0x1d4a2, 0x1d4a2 },
    { 0x1d4a5, 0x1d4a6 },
    { 0x1d4a9, 0x1d4ac },
    { 0x1d4ae, 0x1d4b9 },
    { 0x1d4bb, 0x1d4bb },
    { 0x1d4bd, 0x1d4c0 },
    { 0x1d4c2, 0x1d4c3 },
    { 0x1d4c5, 0x1d505 },
    { 0x1d507, 0x1d50a },
    { 0x1d50d, 0x1d514 },
    { 0x1d516, 0x1d51c },
    { 0x1d51e, 0x1d539 },
    { 0x1d53b, 0x1d53e },
    { 0x1d540, 0x1d544 },
    { 0x1d546, 0x1d546 },
    { 0x1d54a, 0x1d550 },
    { 0x1d552, 0x1d6a3 },
    { 0x1d6a8, 0x1d6c0 },
    { 0x1d6c2, 0x1d6da },
    { 0x1d6dc, 0x1d6fa },
    { 0x1d6fc, 0x1d714 },
    { 0x1d716, 0x1d734 },
    { 0x1d736, 0x1d74e },
    { 0x1d750, 0x1d76e },
    { 0x1d770, 0x1d788 },
    { 0x1d78a, 0x1d7a8 },
    { 0x1d7aa, 0x1d7c2 },
    { 0x1d7c4, 0x1d7c9 },
    { 0x1d7ce, 0x1d7ff },
    { 0x20000, 0x2a6d6 },
    { 0x2f800, 0x2fa1d }
};
static const int table_walpha_count =
    (sizeof(table_walpha)/sizeof(struct interval));

/* ------------------- iswblank -------------------- */
/* defined as 'space or tab': see comments for isspace
   tab  + "Category Zs without mention of '<noBreak>'"
 */
static const struct interval table_wblank[] = {
    { 0x9, 0x9 },
    { 0x20, 0x20 },
//  { 0xa0, 0xa0 }, /* non-breaking space, omitted by glibc, in Solaris */
    { 0x1680, 0x1680 }, /* ogham space mark */
    { 0x2000, 0x2006 }, /* not figure space, 2007? */
    { 0x2008, 0x200a }, /* not zero-width-space, 200b */
//  { 0x202f, 0x202f }, /* narrow no-break space, omitted by glibc, in Solaris */
    { 0x205f, 0x205f }, /* medium mathematical space */
    { 0x3000, 0x3000 }  /* (CJK) ideographic space */
};
static const int table_wblank_count =
    (sizeof(table_wblank)/sizeof(struct interval));

/* ------------------- iswcntrl -------------------- */
static const struct interval table_wcntrl[] = {
  { 0x0, 0x1f },
  { 0x7f, 0x9f },
  { 0x2028, 0x2029 } // Line and paragraph separators
};
static const int table_wcntrl_count =
    (sizeof(table_wcntrl)/sizeof(struct interval));

/* ------------------- iswdigit -------------------- */
/* The C99 standard defines this as just 0-9 */
static const struct interval table_wdigit[] = {
    { 0x30, 0x39 }
};
static const int table_wdigit_count =
    (sizeof(table_wdigit)/sizeof(struct interval));

/* ------------------- iswgraph -------------------- */
/* Could be derived from other tables: C99 says

   The iswgraph function tests for any wide character for which
   iswprint is true and iswspace is false
   
   glibc has

    return (UNICODE_ATTRIBUTES[code_point]['name']
            and UNICODE_ATTRIBUTES[code_point]['name'] != '<control>'
            and not is_space(code_point))

   PCRE has

      Graphic character. Implement this as not Z (space or separator) and
      not C (other), except for Cf (format) with a few exceptions. This seems
      to be what Perl does. The exceptional characters are:

      U+061C           Arabic Letter Mark
      U+180E           Mongolian Vowel Separator
      U+2066 - U+2069  Various "isolate"s
*/

static const struct interval table_wgraph[] = {
    { 0x21, 0x7e },
    { 0xa0, 0x220 },
    { 0x222, 0x233 },
    { 0x250, 0x2ad },
    { 0x2b0, 0x2ee },
    { 0x300, 0x34f },
    { 0x360, 0x36f },
    { 0x374, 0x375 },
    { 0x37a, 0x37a },
    { 0x37e, 0x37e },
    { 0x384, 0x38a },
    { 0x38c, 0x38c },
    { 0x38e, 0x3a1 },
    { 0x3a3, 0x3ce },
    { 0x3d0, 0x3f6 },
    { 0x400, 0x486 },
    { 0x488, 0x4ce },
    { 0x4d0, 0x4f5 },
    { 0x4f8, 0x4f9 },
    { 0x500, 0x50f },
    { 0x531, 0x556 },
    { 0x559, 0x55f },
    { 0x561, 0x587 },
    { 0x589, 0x58a },
    { 0x591, 0x5a1 },
    { 0x5a3, 0x5b9 },
    { 0x5bb, 0x5c4 },
    { 0x5d0, 0x5ea },
    { 0x5f0, 0x5f4 },
    { 0x60c, 0x60c },
    { 0x61b, 0x61b },
    { 0x61f, 0x61f },
    { 0x621, 0x63a },
    { 0x640, 0x655 },
    { 0x660, 0x6ed },
    { 0x6f0, 0x6fe },
    { 0x700, 0x70d },
    { 0x70f, 0x72c },
    { 0x730, 0x74a },
    { 0x780, 0x7b1 },
    { 0x901, 0x903 },
    { 0x905, 0x939 },
    { 0x93c, 0x94d },
    { 0x950, 0x954 },
    { 0x958, 0x970 },
    { 0x981, 0x983 },
    { 0x985, 0x98c },
    { 0x98f, 0x990 },
    { 0x993, 0x9a8 },
    { 0x9aa, 0x9b0 },
    { 0x9b2, 0x9b2 },
    { 0x9b6, 0x9b9 },
    { 0x9bc, 0x9bc },
    { 0x9be, 0x9c4 },
    { 0x9c7, 0x9c8 },
    { 0x9cb, 0x9cd },
    { 0x9d7, 0x9d7 },
    { 0x9dc, 0x9dd },
    { 0x9df, 0x9e3 },
    { 0x9e6, 0x9fa },
    { 0xa02, 0xa02 },
    { 0xa05, 0xa0a },
    { 0xa0f, 0xa10 },
    { 0xa13, 0xa28 },
    { 0xa2a, 0xa30 },
    { 0xa32, 0xa33 },
    { 0xa35, 0xa36 },
    { 0xa38, 0xa39 },
    { 0xa3c, 0xa3c },
    { 0xa3e, 0xa42 },
    { 0xa47, 0xa48 },
    { 0xa4b, 0xa4d },
    { 0xa59, 0xa5c },
    { 0xa5e, 0xa5e },
    { 0xa66, 0xa74 },
    { 0xa81, 0xa83 },
    { 0xa85, 0xa8b },
    { 0xa8d, 0xa8d },
    { 0xa8f, 0xa91 },
    { 0xa93, 0xaa8 },
    { 0xaaa, 0xab0 },
    { 0xab2, 0xab3 },
    { 0xab5, 0xab9 },
    { 0xabc, 0xac5 },
    { 0xac7, 0xac9 },
    { 0xacb, 0xacd },
    { 0xad0, 0xad0 },
    { 0xae0, 0xae0 },
    { 0xae6, 0xaef },
    { 0xb01, 0xb03 },
    { 0xb05, 0xb0c },
    { 0xb0f, 0xb10 },
    { 0xb13, 0xb28 },
    { 0xb2a, 0xb30 },
    { 0xb32, 0xb33 },
    { 0xb36, 0xb39 },
    { 0xb3c, 0xb43 },
    { 0xb47, 0xb48 },
    { 0xb4b, 0xb4d },
    { 0xb56, 0xb57 },
    { 0xb5c, 0xb5d },
    { 0xb5f, 0xb61 },
    { 0xb66, 0xb70 },
    { 0xb82, 0xb83 },
    { 0xb85, 0xb8a },
    { 0xb8e, 0xb90 },
    { 0xb92, 0xb95 },
    { 0xb99, 0xb9a },
    { 0xb9c, 0xb9c },
    { 0xb9e, 0xb9f },
    { 0xba3, 0xba4 },
    { 0xba8, 0xbaa },
    { 0xbae, 0xbb5 },
    { 0xbb7, 0xbb9 },
    { 0xbbe, 0xbc2 },
    { 0xbc6, 0xbc8 },
    { 0xbca, 0xbcd },
    { 0xbd7, 0xbd7 },
    { 0xbe7, 0xbf2 },
    { 0xc01, 0xc03 },
    { 0xc05, 0xc0c },
    { 0xc0e, 0xc10 },
    { 0xc12, 0xc28 },
    { 0xc2a, 0xc33 },
    { 0xc35, 0xc39 },
    { 0xc3e, 0xc44 },
    { 0xc46, 0xc48 },
    { 0xc4a, 0xc4d },
    { 0xc55, 0xc56 },
    { 0xc60, 0xc61 },
    { 0xc66, 0xc6f },
    { 0xc82, 0xc83 },
    { 0xc85, 0xc8c },
    { 0xc8e, 0xc90 },
    { 0xc92, 0xca8 },
    { 0xcaa, 0xcb3 },
    { 0xcb5, 0xcb9 },
    { 0xcbe, 0xcc4 },
    { 0xcc6, 0xcc8 },
    { 0xcca, 0xccd },
    { 0xcd5, 0xcd6 },
    { 0xcde, 0xcde },
    { 0xce0, 0xce1 },
    { 0xce6, 0xcef },
    { 0xd02, 0xd03 },
    { 0xd05, 0xd0c },
    { 0xd0e, 0xd10 },
    { 0xd12, 0xd28 },
    { 0xd2a, 0xd39 },
    { 0xd3e, 0xd43 },
    { 0xd46, 0xd48 },
    { 0xd4a, 0xd4d },
    { 0xd57, 0xd57 },
    { 0xd60, 0xd61 },
    { 0xd66, 0xd6f },
    { 0xd82, 0xd83 },
    { 0xd85, 0xd96 },
    { 0xd9a, 0xdb1 },
    { 0xdb3, 0xdbb },
    { 0xdbd, 0xdbd },
    { 0xdc0, 0xdc6 },
    { 0xdca, 0xdca },
    { 0xdcf, 0xdd4 },
    { 0xdd6, 0xdd6 },
    { 0xdd8, 0xddf },
    { 0xdf2, 0xdf4 },
    { 0xe01, 0xe3a },
    { 0xe3f, 0xe5b },
    { 0xe81, 0xe82 },
    { 0xe84, 0xe84 },
    { 0xe87, 0xe88 },
    { 0xe8a, 0xe8a },
    { 0xe8d, 0xe8d },
    { 0xe94, 0xe97 },
    { 0xe99, 0xe9f },
    { 0xea1, 0xea3 },
    { 0xea5, 0xea5 },
    { 0xea7, 0xea7 },
    { 0xeaa, 0xeab },
    { 0xead, 0xeb9 },
    { 0xebb, 0xebd },
    { 0xec0, 0xec4 },
    { 0xec6, 0xec6 },
    { 0xec8, 0xecd },
    { 0xed0, 0xed9 },
    { 0xedc, 0xedd },
    { 0xf00, 0xf47 },
    { 0xf49, 0xf6a },
    { 0xf71, 0xf8b },
    { 0xf90, 0xf97 },
    { 0xf99, 0xfbc },
    { 0xfbe, 0xfcc },
    { 0xfcf, 0xfcf },
    { 0x1000, 0x1021 },
    { 0x1023, 0x1027 },
    { 0x1029, 0x102a },
    { 0x102c, 0x1032 },
    { 0x1036, 0x1039 },
    { 0x1040, 0x1059 },
    { 0x10a0, 0x10c5 },
    { 0x10d0, 0x10f8 },
    { 0x10fb, 0x10fb },
    { 0x1100, 0x1159 },
    { 0x115f, 0x11a2 },
    { 0x11a8, 0x11f9 },
    { 0x1200, 0x1206 },
    { 0x1208, 0x1246 },
    { 0x1248, 0x1248 },
    { 0x124a, 0x124d },
    { 0x1250, 0x1256 },
    { 0x1258, 0x1258 },
    { 0x125a, 0x125d },
    { 0x1260, 0x1286 },
    { 0x1288, 0x1288 },
    { 0x128a, 0x128d },
    { 0x1290, 0x12ae },
    { 0x12b0, 0x12b0 },
    { 0x12b2, 0x12b5 },
    { 0x12b8, 0x12be },
    { 0x12c0, 0x12c0 },
    { 0x12c2, 0x12c5 },
    { 0x12c8, 0x12ce },
    { 0x12d0, 0x12d6 },
    { 0x12d8, 0x12ee },
    { 0x12f0, 0x130e },
    { 0x1310, 0x1310 },
    { 0x1312, 0x1315 },
    { 0x1318, 0x131e },
    { 0x1320, 0x1346 },
    { 0x1348, 0x135a },
    { 0x1361, 0x137c },
    { 0x13a0, 0x13f4 },
    { 0x1401, 0x1676 },
    { 0x1681, 0x169c },
    { 0x16a0, 0x16f0 },
    { 0x1700, 0x170c },
    { 0x170e, 0x1714 },
    { 0x1720, 0x1736 },
    { 0x1740, 0x1753 },
    { 0x1760, 0x176c },
    { 0x176e, 0x1770 },
    { 0x1772, 0x1773 },
    { 0x1780, 0x17dc },
    { 0x17e0, 0x17e9 },
    { 0x1800, 0x180e },
    { 0x1810, 0x1819 },
    { 0x1820, 0x1877 },
    { 0x1880, 0x18a9 },
    { 0x1e00, 0x1e9b },
    { 0x1ea0, 0x1ef9 },
    { 0x1f00, 0x1f15 },
    { 0x1f18, 0x1f1d },
    { 0x1f20, 0x1f45 },
    { 0x1f48, 0x1f4d },
    { 0x1f50, 0x1f57 },
    { 0x1f59, 0x1f59 },
    { 0x1f5b, 0x1f5b },
    { 0x1f5d, 0x1f5d },
    { 0x1f5f, 0x1f7d },
    { 0x1f80, 0x1fb4 },
    { 0x1fb6, 0x1fc4 },
    { 0x1fc6, 0x1fd3 },
    { 0x1fd6, 0x1fdb },
    { 0x1fdd, 0x1fef },
    { 0x1ff2, 0x1ff4 },
    { 0x1ff6, 0x1ffe },
    { 0x2007, 0x2007 },
    { 0x200b, 0x200b }, // excluded from space
    { 0x200c, 0x2027 },
    { 0x202a, 0x2052 },
    { 0x2057, 0x2057 },
    { 0x2060, 0x2063 },
    { 0x206a, 0x2071 },
    { 0x2074, 0x208e },
    { 0x20a0, 0x20b1 },
    { 0x20d0, 0x20ea },
    { 0x2100, 0x213a },
    { 0x213d, 0x214b },
    { 0x2153, 0x2183 },
    { 0x2190, 0x23ce },
    { 0x2400, 0x2426 },
    { 0x2440, 0x244a },
    { 0x2460, 0x24fe },
    { 0x2500, 0x2613 },
    { 0x2616, 0x2617 },
    { 0x2619, 0x267d },
    { 0x2680, 0x2689 },
    { 0x2701, 0x2704 },
    { 0x2706, 0x2709 },
    { 0x270c, 0x2727 },
    { 0x2729, 0x274b },
    { 0x274d, 0x274d },
    { 0x274f, 0x2752 },
    { 0x2756, 0x2756 },
    { 0x2758, 0x275e },
    { 0x2761, 0x2794 },
    { 0x2798, 0x27af },
    { 0x27b1, 0x27be },
    { 0x27d0, 0x27eb },
    { 0x27f0, 0x2aff },
    { 0x2e80, 0x2e99 },
    { 0x2e9b, 0x2ef3 },
    { 0x2f00, 0x2fd5 },
    { 0x2ff0, 0x2ffb },
    { 0x3001, 0x303f },
    { 0x3041, 0x3096 },
    { 0x3099, 0x30ff },
    { 0x3105, 0x312c },
    { 0x3131, 0x318e },
    { 0x3190, 0x31b7 },
    { 0x31f0, 0x321c },
    { 0x3220, 0x3243 },
    { 0x3251, 0x327b },
    { 0x327f, 0x32cb },
    { 0x32d0, 0x32fe },
    { 0x3300, 0x3376 },
    { 0x337b, 0x33dd },
    { 0x33e0, 0x33fe },
    { 0x3400, 0x4db5 },
    { 0x4e00, 0x9fa5 },
    { 0xa000, 0xa48c },
    { 0xa490, 0xa4c6 },
    { 0xac00, 0xd7a3 },
    { 0xe000, 0xfa2d },
    { 0xfa30, 0xfa6a },
    { 0xfb00, 0xfb06 },
    { 0xfb13, 0xfb17 },
    { 0xfb1d, 0xfb36 },
    { 0xfb38, 0xfb3c },
    { 0xfb3e, 0xfb3e },
    { 0xfb40, 0xfb41 },
    { 0xfb43, 0xfb44 },
    { 0xfb46, 0xfbb1 },
    { 0xfbd3, 0xfd3f },
    { 0xfd50, 0xfd8f },
    { 0xfd92, 0xfdc7 },
    { 0xfdf0, 0xfdfc },
    { 0xfe00, 0xfe0f },
    { 0xfe20, 0xfe23 },
    { 0xfe30, 0xfe46 },
    { 0xfe49, 0xfe52 },
    { 0xfe54, 0xfe66 },
    { 0xfe68, 0xfe6b },
    { 0xfe70, 0xfe74 },
    { 0xfe76, 0xfefc },
    { 0xfeff, 0xfeff },
    { 0xff01, 0xffbe },
    { 0xffc2, 0xffc7 },
    { 0xffca, 0xffcf },
    { 0xffd2, 0xffd7 },
    { 0xffda, 0xffdc },
    { 0xffe0, 0xffe6 },
    { 0xffe8, 0xffee },
    { 0xfff9, 0xfffd },
    { 0x10300, 0x1031e },
    { 0x10320, 0x10323 },
    { 0x10330, 0x1034a },
    { 0x10400, 0x10425 },
    { 0x10428, 0x1044d },
    { 0x1d000, 0x1d0f5 },
    { 0x1d100, 0x1d126 },
    { 0x1d12a, 0x1d1dd },
    { 0x1d400, 0x1d454 },
    { 0x1d456, 0x1d49c },
    { 0x1d49e, 0x1d49f },
    { 0x1d4a2, 0x1d4a2 },
    { 0x1d4a5, 0x1d4a6 },
    { 0x1d4a9, 0x1d4ac },
    { 0x1d4ae, 0x1d4b9 },
    { 0x1d4bb, 0x1d4bb },
    { 0x1d4bd, 0x1d4c0 },
    { 0x1d4c2, 0x1d4c3 },
    { 0x1d4c5, 0x1d505 },
    { 0x1d507, 0x1d50a },
    { 0x1d50d, 0x1d514 },
    { 0x1d516, 0x1d51c },
    { 0x1d51e, 0x1d539 },
    { 0x1d53b, 0x1d53e },
    { 0x1d540, 0x1d544 },
    { 0x1d546, 0x1d546 },
    { 0x1d54a, 0x1d550 },
    { 0x1d552, 0x1d6a3 },
    { 0x1d6a8, 0x1d7c9 },
    { 0x1d7ce, 0x1d7ff },
    { 0x20000, 0x2a6d6 },
    { 0x2f800, 0x2fa1d },
    { 0xe0001, 0xe0001 },
    { 0xe0020, 0xe007f },
    { 0xf0000, 0xffffd },
    { 0x100000, 0x10fffd }
};
static const int table_wgraph_count =
  (sizeof(table_wgraph)/sizeof(struct interval));

/* ------------------- iswlower -------------------- */
/* This is defined in the C99 standard as 

   a lowercase letter or is one of a locale-specific set of wide
   characters for which none of iswcntrl, iswdigit, iswpunct, or iswspace
   is true.

   glibc has 

    # Some characters are defined as “Lowercase” in
    # DerivedCoreProperties.txt but do not have a mapping to upper
    # case. For example, ꜰ U+A72F “LATIN LETTER SMALL CAPITAL F” is
    # one of these.
    return (to_upper(code_point) != code_point
            # <U00DF> is lowercase, but without simple to_upper mapping.
            or code_point == 0x00DF
            or (code_point in DERIVED_CORE_PROPERTIES
                and 'Lowercase' in DERIVED_CORE_PROPERTIES[code_point]))
*/
static const struct interval table_wlower[] = {
    { 0x61, 0x7a },
    { 0xb5, 0xb5 },
    { 0xdf, 0xf6 },
    { 0xf8, 0xff },
    { 0x101, 0x101 },
    { 0x103, 0x103 },
    { 0x105, 0x105 },
    { 0x107, 0x107 },
    { 0x109, 0x109 },
    { 0x10b, 0x10b },
    { 0x10d, 0x10d },
    { 0x10f, 0x10f },
    { 0x111, 0x111 },
    { 0x113, 0x113 },
    { 0x115, 0x115 },
    { 0x117, 0x117 },
    { 0x119, 0x119 },
    { 0x11b, 0x11b },
    { 0x11d, 0x11d },
    { 0x11f, 0x11f },
    { 0x121, 0x121 },
    { 0x123, 0x123 },
    { 0x125, 0x125 },
    { 0x127, 0x127 },
    { 0x129, 0x129 },
    { 0x12b, 0x12b },
    { 0x12d, 0x12d },
    { 0x12f, 0x12f },
    { 0x131, 0x131 },
    { 0x133, 0x133 },
    { 0x135, 0x135 },
    { 0x137, 0x137 },
    { 0x13a, 0x13a },
    { 0x13c, 0x13c },
    { 0x13e, 0x13e },
    { 0x140, 0x140 },
    { 0x142, 0x142 },
    { 0x144, 0x144 },
    { 0x146, 0x146 },
    { 0x148, 0x148 },
    { 0x14b, 0x14b },
    { 0x14d, 0x14d },
    { 0x14f, 0x14f },
    { 0x151, 0x151 },
    { 0x153, 0x153 },
    { 0x155, 0x155 },
    { 0x157, 0x157 },
    { 0x159, 0x159 },
    { 0x15b, 0x15b },
    { 0x15d, 0x15d },
    { 0x15f, 0x15f },
    { 0x161, 0x161 },
    { 0x163, 0x163 },
    { 0x165, 0x165 },
    { 0x167, 0x167 },
    { 0x169, 0x169 },
    { 0x16b, 0x16b },
    { 0x16d, 0x16d },
    { 0x16f, 0x16f },
    { 0x171, 0x171 },
    { 0x173, 0x173 },
    { 0x175, 0x175 },
    { 0x177, 0x177 },
    { 0x17a, 0x17a },
    { 0x17c, 0x17c },
    { 0x17e, 0x17f },
    { 0x183, 0x183 },
    { 0x185, 0x185 },
    { 0x188, 0x188 },
    { 0x18c, 0x18c },
    { 0x192, 0x192 },
    { 0x195, 0x195 },
    { 0x199, 0x199 },
    { 0x19e, 0x19e },
    { 0x1a1, 0x1a1 },
    { 0x1a3, 0x1a3 },
    { 0x1a5, 0x1a5 },
    { 0x1a8, 0x1a8 },
    { 0x1ad, 0x1ad },
    { 0x1b0, 0x1b0 },
    { 0x1b4, 0x1b4 },
    { 0x1b6, 0x1b6 },
    { 0x1b9, 0x1b9 },
    { 0x1bd, 0x1bd },
    { 0x1bf, 0x1bf },
    { 0x1c5, 0x1c6 },
    { 0x1c8, 0x1c9 },
    { 0x1cb, 0x1cc },
    { 0x1ce, 0x1ce },
    { 0x1d0, 0x1d0 },
    { 0x1d2, 0x1d2 },
    { 0x1d4, 0x1d4 },
    { 0x1d6, 0x1d6 },
    { 0x1d8, 0x1d8 },
    { 0x1da, 0x1da },
    { 0x1dc, 0x1dd },
    { 0x1df, 0x1df },
    { 0x1e1, 0x1e1 },
    { 0x1e3, 0x1e3 },
    { 0x1e5, 0x1e5 },
    { 0x1e7, 0x1e7 },
    { 0x1e9, 0x1e9 },
    { 0x1eb, 0x1eb },
    { 0x1ed, 0x1ed },
    { 0x1ef, 0x1ef },
    { 0x1f2, 0x1f3 },
    { 0x1f5, 0x1f5 },
    { 0x1f9, 0x1f9 },
    { 0x1fb, 0x1fb },
    { 0x1fd, 0x1fd },
    { 0x1ff, 0x1ff },
    { 0x201, 0x201 },
    { 0x203, 0x203 },
    { 0x205, 0x205 },
    { 0x207, 0x207 },
    { 0x209, 0x209 },
    { 0x20b, 0x20b },
    { 0x20d, 0x20d },
    { 0x20f, 0x20f },
    { 0x211, 0x211 },
    { 0x213, 0x213 },
    { 0x215, 0x215 },
    { 0x217, 0x217 },
    { 0x219, 0x219 },
    { 0x21b, 0x21b },
    { 0x21d, 0x21d },
    { 0x21f, 0x21f },
    { 0x223, 0x223 },
    { 0x225, 0x225 },
    { 0x227, 0x227 },
    { 0x229, 0x229 },
    { 0x22b, 0x22b },
    { 0x22d, 0x22d },
    { 0x22f, 0x22f },
    { 0x231, 0x231 },
    { 0x233, 0x233 },
    { 0x253, 0x254 },
    { 0x256, 0x257 },
    { 0x259, 0x259 },
    { 0x25b, 0x25b },
    { 0x260, 0x260 },
    { 0x263, 0x263 },
    { 0x268, 0x269 },
    { 0x26f, 0x26f },
    { 0x272, 0x272 },
    { 0x275, 0x275 },
    { 0x280, 0x280 },
    { 0x283, 0x283 },
    { 0x288, 0x288 },
    { 0x28a, 0x28b },
    { 0x292, 0x292 },
    { 0x345, 0x345 },
    { 0x3ac, 0x3af },
    { 0x3b1, 0x3ce },
    { 0x3d0, 0x3d1 },
    { 0x3d5, 0x3d6 },
    { 0x3d9, 0x3d9 },
    { 0x3db, 0x3db },
    { 0x3dd, 0x3dd },
    { 0x3df, 0x3df },
    { 0x3e1, 0x3e1 },
    { 0x3e3, 0x3e3 },
    { 0x3e5, 0x3e5 },
    { 0x3e7, 0x3e7 },
    { 0x3e9, 0x3e9 },
    { 0x3eb, 0x3eb },
    { 0x3ed, 0x3ed },
    { 0x3ef, 0x3f2 },
    { 0x3f5, 0x3f5 },
    { 0x430, 0x45f },
    { 0x461, 0x461 },
    { 0x463, 0x463 },
    { 0x465, 0x465 },
    { 0x467, 0x467 },
    { 0x469, 0x469 },
    { 0x46b, 0x46b },
    { 0x46d, 0x46d },
    { 0x46f, 0x46f },
    { 0x471, 0x471 },
    { 0x473, 0x473 },
    { 0x475, 0x475 },
    { 0x477, 0x477 },
    { 0x479, 0x479 },
    { 0x47b, 0x47b },
    { 0x47d, 0x47d },
    { 0x47f, 0x47f },
    { 0x481, 0x481 },
    { 0x48b, 0x48b },
    { 0x48d, 0x48d },
    { 0x48f, 0x48f },
    { 0x491, 0x491 },
    { 0x493, 0x493 },
    { 0x495, 0x495 },
    { 0x497, 0x497 },
    { 0x499, 0x499 },
    { 0x49b, 0x49b },
    { 0x49d, 0x49d },
    { 0x49f, 0x49f },
    { 0x4a1, 0x4a1 },
    { 0x4a3, 0x4a3 },
    { 0x4a5, 0x4a5 },
    { 0x4a7, 0x4a7 },
    { 0x4a9, 0x4a9 },
    { 0x4ab, 0x4ab },
    { 0x4ad, 0x4ad },
    { 0x4af, 0x4af },
    { 0x4b1, 0x4b1 },
    { 0x4b3, 0x4b3 },
    { 0x4b5, 0x4b5 },
    { 0x4b7, 0x4b7 },
    { 0x4b9, 0x4b9 },
    { 0x4bb, 0x4bb },
    { 0x4bd, 0x4bd },
    { 0x4bf, 0x4bf },
    { 0x4c2, 0x4c2 },
    { 0x4c4, 0x4c4 },
    { 0x4c6, 0x4c6 },
    { 0x4c8, 0x4c8 },
    { 0x4ca, 0x4ca },
    { 0x4cc, 0x4cc },
    { 0x4ce, 0x4ce },
    { 0x4d1, 0x4d1 },
    { 0x4d3, 0x4d3 },
    { 0x4d5, 0x4d5 },
    { 0x4d7, 0x4d7 },
    { 0x4d9, 0x4d9 },
    { 0x4db, 0x4db },
    { 0x4dd, 0x4dd },
    { 0x4df, 0x4df },
    { 0x4e1, 0x4e1 },
    { 0x4e3, 0x4e3 },
    { 0x4e5, 0x4e5 },
    { 0x4e7, 0x4e7 },
    { 0x4e9, 0x4e9 },
    { 0x4eb, 0x4eb },
    { 0x4ed, 0x4ed },
    { 0x4ef, 0x4ef },
    { 0x4f1, 0x4f1 },
    { 0x4f3, 0x4f3 },
    { 0x4f5, 0x4f5 },
    { 0x4f9, 0x4f9 },
    { 0x501, 0x501 },
    { 0x503, 0x503 },
    { 0x505, 0x505 },
    { 0x507, 0x507 },
    { 0x509, 0x509 },
    { 0x50b, 0x50b },
    { 0x50d, 0x50d },
    { 0x50f, 0x50f },
    { 0x561, 0x586 },
    { 0x1e01, 0x1e01 },
    { 0x1e03, 0x1e03 },
    { 0x1e05, 0x1e05 },
    { 0x1e07, 0x1e07 },
    { 0x1e09, 0x1e09 },
    { 0x1e0b, 0x1e0b },
    { 0x1e0d, 0x1e0d },
    { 0x1e0f, 0x1e0f },
    { 0x1e11, 0x1e11 },
    { 0x1e13, 0x1e13 },
    { 0x1e15, 0x1e15 },
    { 0x1e17, 0x1e17 },
    { 0x1e19, 0x1e19 },
    { 0x1e1b, 0x1e1b },
    { 0x1e1d, 0x1e1d },
    { 0x1e1f, 0x1e1f },
    { 0x1e21, 0x1e21 },
    { 0x1e23, 0x1e23 },
    { 0x1e25, 0x1e25 },
    { 0x1e27, 0x1e27 },
    { 0x1e29, 0x1e29 },
    { 0x1e2b, 0x1e2b },
    { 0x1e2d, 0x1e2d },
    { 0x1e2f, 0x1e2f },
    { 0x1e31, 0x1e31 },
    { 0x1e33, 0x1e33 },
    { 0x1e35, 0x1e35 },
    { 0x1e37, 0x1e37 },
    { 0x1e39, 0x1e39 },
    { 0x1e3b, 0x1e3b },
    { 0x1e3d, 0x1e3d },
    { 0x1e3f, 0x1e3f },
    { 0x1e41, 0x1e41 },
    { 0x1e43, 0x1e43 },
    { 0x1e45, 0x1e45 },
    { 0x1e47, 0x1e47 },
    { 0x1e49, 0x1e49 },
    { 0x1e4b, 0x1e4b },
    { 0x1e4d, 0x1e4d },
    { 0x1e4f, 0x1e4f },
    { 0x1e51, 0x1e51 },
    { 0x1e53, 0x1e53 },
    { 0x1e55, 0x1e55 },
    { 0x1e57, 0x1e57 },
    { 0x1e59, 0x1e59 },
    { 0x1e5b, 0x1e5b },
    { 0x1e5d, 0x1e5d },
    { 0x1e5f, 0x1e5f },
    { 0x1e61, 0x1e61 },
    { 0x1e63, 0x1e63 },
    { 0x1e65, 0x1e65 },
    { 0x1e67, 0x1e67 },
    { 0x1e69, 0x1e69 },
    { 0x1e6b, 0x1e6b },
    { 0x1e6d, 0x1e6d },
    { 0x1e6f, 0x1e6f },
    { 0x1e71, 0x1e71 },
    { 0x1e73, 0x1e73 },
    { 0x1e75, 0x1e75 },
    { 0x1e77, 0x1e77 },
    { 0x1e79, 0x1e79 },
    { 0x1e7b, 0x1e7b },
    { 0x1e7d, 0x1e7d },
    { 0x1e7f, 0x1e7f },
    { 0x1e81, 0x1e81 },
    { 0x1e83, 0x1e83 },
    { 0x1e85, 0x1e85 },
    { 0x1e87, 0x1e87 },
    { 0x1e89, 0x1e89 },
    { 0x1e8b, 0x1e8b },
    { 0x1e8d, 0x1e8d },
    { 0x1e8f, 0x1e8f },
    { 0x1e91, 0x1e91 },
    { 0x1e93, 0x1e93 },
    { 0x1e95, 0x1e95 },
    { 0x1e9b, 0x1e9b },
    { 0x1ea1, 0x1ea1 },
    { 0x1ea3, 0x1ea3 },
    { 0x1ea5, 0x1ea5 },
    { 0x1ea7, 0x1ea7 },
    { 0x1ea9, 0x1ea9 },
    { 0x1eab, 0x1eab },
    { 0x1ead, 0x1ead },
    { 0x1eaf, 0x1eaf },
    { 0x1eb1, 0x1eb1 },
    { 0x1eb3, 0x1eb3 },
    { 0x1eb5, 0x1eb5 },
    { 0x1eb7, 0x1eb7 },
    { 0x1eb9, 0x1eb9 },
    { 0x1ebb, 0x1ebb },
    { 0x1ebd, 0x1ebd },
    { 0x1ebf, 0x1ebf },
    { 0x1ec1, 0x1ec1 },
    { 0x1ec3, 0x1ec3 },
    { 0x1ec5, 0x1ec5 },
    { 0x1ec7, 0x1ec7 },
    { 0x1ec9, 0x1ec9 },
    { 0x1ecb, 0x1ecb },
    { 0x1ecd, 0x1ecd },
    { 0x1ecf, 0x1ecf },
    { 0x1ed1, 0x1ed1 },
    { 0x1ed3, 0x1ed3 },
    { 0x1ed5, 0x1ed5 },
    { 0x1ed7, 0x1ed7 },
    { 0x1ed9, 0x1ed9 },
    { 0x1edb, 0x1edb },
    { 0x1edd, 0x1edd },
    { 0x1edf, 0x1edf },
    { 0x1ee1, 0x1ee1 },
    { 0x1ee3, 0x1ee3 },
    { 0x1ee5, 0x1ee5 },
    { 0x1ee7, 0x1ee7 },
    { 0x1ee9, 0x1ee9 },
    { 0x1eeb, 0x1eeb },
    { 0x1eed, 0x1eed },
    { 0x1eef, 0x1eef },
    { 0x1ef1, 0x1ef1 },
    { 0x1ef3, 0x1ef3 },
    { 0x1ef5, 0x1ef5 },
    { 0x1ef7, 0x1ef7 },
    { 0x1ef9, 0x1ef9 },
    { 0x1f00, 0x1f07 },
    { 0x1f10, 0x1f15 },
    { 0x1f20, 0x1f27 },
    { 0x1f30, 0x1f37 },
    { 0x1f40, 0x1f45 },
    { 0x1f51, 0x1f51 },
    { 0x1f53, 0x1f53 },
    { 0x1f55, 0x1f55 },
    { 0x1f57, 0x1f57 },
    { 0x1f60, 0x1f67 },
    { 0x1f70, 0x1f7d },
    { 0x1f80, 0x1f87 },
    { 0x1f90, 0x1f97 },
    { 0x1fa0, 0x1fa7 },
    { 0x1fb0, 0x1fb1 },
    { 0x1fb3, 0x1fb3 },
    { 0x1fbe, 0x1fbe },
    { 0x1fc3, 0x1fc3 },
    { 0x1fd0, 0x1fd1 },
    { 0x1fe0, 0x1fe1 },
    { 0x1fe5, 0x1fe5 },
    { 0x1ff3, 0x1ff3 },
    { 0x2170, 0x217f },
    { 0x24d0, 0x24e9 },
    { 0xff41, 0xff5a },
    { 0x10428, 0x1044d }
};
static const int table_wlower_count =
    (sizeof(table_wlower)/sizeof(struct interval));

/* ------------------- iswprint -------------------- */
/* glibc has

    return (UNICODE_ATTRIBUTES[code_point]['name']
            and UNICODE_ATTRIBUTES[code_point]['name'] != '<control>'
            and UNICODE_ATTRIBUTES[code_point]['category'] not in ['Zl', 'Zp'])

 */
static const struct interval table_wprint[] = {
    { 0x20, 0x7e },
    { 0xa0, 0x220 }, // glibc has <U00A0>..<U0377>
    { 0x222, 0x233 },
    { 0x250, 0x2ad },
    { 0x2b0, 0x2ee },
    { 0x300, 0x34f },
    { 0x360, 0x36f },
    { 0x374, 0x375 },
    { 0x37a, 0x37a },
    { 0x37e, 0x37e },
    { 0x384, 0x38a },
    { 0x38c, 0x38c },
    { 0x38e, 0x3a1 },
    { 0x3a3, 0x3ce },
    { 0x3d0, 0x3f6 },
    { 0x400, 0x486 },
    { 0x488, 0x4ce },
    { 0x4d0, 0x4f5 },
    { 0x4f8, 0x4f9 },
    { 0x500, 0x50f },
    { 0x531, 0x556 },
    { 0x559, 0x55f },
    { 0x561, 0x587 },
    { 0x589, 0x58a },
    { 0x591, 0x5a1 },
    { 0x5a3, 0x5b9 },
    { 0x5bb, 0x5c4 },
    { 0x5d0, 0x5ea },
    { 0x5f0, 0x5f4 },
    { 0x60c, 0x60c },
    { 0x61b, 0x61b },
    { 0x61f, 0x61f },
    { 0x621, 0x63a },
    { 0x640, 0x655 },
    { 0x660, 0x6ed },
    { 0x6f0, 0x6fe },
    { 0x700, 0x70d },
    { 0x70f, 0x72c },
    { 0x730, 0x74a },
    { 0x780, 0x7b1 },
    { 0x901, 0x903 },
    { 0x905, 0x939 },
    { 0x93c, 0x94d },
    { 0x950, 0x954 },
    { 0x958, 0x970 },
    { 0x981, 0x983 },
    { 0x985, 0x98c },
    { 0x98f, 0x990 },
    { 0x993, 0x9a8 },
    { 0x9aa, 0x9b0 },
    { 0x9b2, 0x9b2 },
    { 0x9b6, 0x9b9 },
    { 0x9bc, 0x9bc },
    { 0x9be, 0x9c4 },
    { 0x9c7, 0x9c8 },
    { 0x9cb, 0x9cd },
    { 0x9d7, 0x9d7 },
    { 0x9dc, 0x9dd },
    { 0x9df, 0x9e3 },
    { 0x9e6, 0x9fa },
    { 0xa02, 0xa02 },
    { 0xa05, 0xa0a },
    { 0xa0f, 0xa10 },
    { 0xa13, 0xa28 },
    { 0xa2a, 0xa30 },
    { 0xa32, 0xa33 },
    { 0xa35, 0xa36 },
    { 0xa38, 0xa39 },
    { 0xa3c, 0xa3c },
    { 0xa3e, 0xa42 },
    { 0xa47, 0xa48 },
    { 0xa4b, 0xa4d },
    { 0xa59, 0xa5c },
    { 0xa5e, 0xa5e },
    { 0xa66, 0xa74 },
    { 0xa81, 0xa83 },
    { 0xa85, 0xa8b },
    { 0xa8d, 0xa8d },
    { 0xa8f, 0xa91 },
    { 0xa93, 0xaa8 },
    { 0xaaa, 0xab0 },
    { 0xab2, 0xab3 },
    { 0xab5, 0xab9 },
    { 0xabc, 0xac5 },
    { 0xac7, 0xac9 },
    { 0xacb, 0xacd },
    { 0xad0, 0xad0 },
    { 0xae0, 0xae0 },
    { 0xae6, 0xaef },
    { 0xb01, 0xb03 },
    { 0xb05, 0xb0c },
    { 0xb0f, 0xb10 },
    { 0xb13, 0xb28 },
    { 0xb2a, 0xb30 },
    { 0xb32, 0xb33 },
    { 0xb36, 0xb39 },
    { 0xb3c, 0xb43 },
    { 0xb47, 0xb48 },
    { 0xb4b, 0xb4d },
    { 0xb56, 0xb57 },
    { 0xb5c, 0xb5d },
    { 0xb5f, 0xb61 },
    { 0xb66, 0xb70 },
    { 0xb82, 0xb83 },
    { 0xb85, 0xb8a },
    { 0xb8e, 0xb90 },
    { 0xb92, 0xb95 },
    { 0xb99, 0xb9a },
    { 0xb9c, 0xb9c },
    { 0xb9e, 0xb9f },
    { 0xba3, 0xba4 },
    { 0xba8, 0xbaa },
    { 0xbae, 0xbb5 },
    { 0xbb7, 0xbb9 },
    { 0xbbe, 0xbc2 },
    { 0xbc6, 0xbc8 },
    { 0xbca, 0xbcd },
    { 0xbd7, 0xbd7 },
    { 0xbe7, 0xbf2 },
    { 0xc01, 0xc03 },
    { 0xc05, 0xc0c },
    { 0xc0e, 0xc10 },
    { 0xc12, 0xc28 },
    { 0xc2a, 0xc33 },
    { 0xc35, 0xc39 },
    { 0xc3e, 0xc44 },
    { 0xc46, 0xc48 },
    { 0xc4a, 0xc4d },
    { 0xc55, 0xc56 },
    { 0xc60, 0xc61 },
    { 0xc66, 0xc6f },
    { 0xc82, 0xc83 },
    { 0xc85, 0xc8c },
    { 0xc8e, 0xc90 },
    { 0xc92, 0xca8 },
    { 0xcaa, 0xcb3 },
    { 0xcb5, 0xcb9 },
    { 0xcbe, 0xcc4 },
    { 0xcc6, 0xcc8 },
    { 0xcca, 0xccd },
    { 0xcd5, 0xcd6 },
    { 0xcde, 0xcde },
    { 0xce0, 0xce1 },
    { 0xce6, 0xcef },
    { 0xd02, 0xd03 },
    { 0xd05, 0xd0c },
    { 0xd0e, 0xd10 },
    { 0xd12, 0xd28 },
    { 0xd2a, 0xd39 },
    { 0xd3e, 0xd43 },
    { 0xd46, 0xd48 },
    { 0xd4a, 0xd4d },
    { 0xd57, 0xd57 },
    { 0xd60, 0xd61 },
    { 0xd66, 0xd6f },
    { 0xd82, 0xd83 },
    { 0xd85, 0xd96 },
    { 0xd9a, 0xdb1 },
    { 0xdb3, 0xdbb },
    { 0xdbd, 0xdbd },
    { 0xdc0, 0xdc6 },
    { 0xdca, 0xdca },
    { 0xdcf, 0xdd4 },
    { 0xdd6, 0xdd6 },
    { 0xdd8, 0xddf },
    { 0xdf2, 0xdf4 },
    { 0xe01, 0xe3a },
    { 0xe3f, 0xe5b },
    { 0xe81, 0xe82 },
    { 0xe84, 0xe84 },
    { 0xe87, 0xe88 },
    { 0xe8a, 0xe8a },
    { 0xe8d, 0xe8d },
    { 0xe94, 0xe97 },
    { 0xe99, 0xe9f },
    { 0xea1, 0xea3 },
    { 0xea5, 0xea5 },
    { 0xea7, 0xea7 },
    { 0xeaa, 0xeab },
    { 0xead, 0xeb9 },
    { 0xebb, 0xebd },
    { 0xec0, 0xec4 },
    { 0xec6, 0xec6 },
    { 0xec8, 0xecd },
    { 0xed0, 0xed9 },
    { 0xedc, 0xedd },
    { 0xf00, 0xf47 },
    { 0xf49, 0xf6a },
    { 0xf71, 0xf8b },
    { 0xf90, 0xf97 },
    { 0xf99, 0xfbc },
    { 0xfbe, 0xfcc },
    { 0xfcf, 0xfcf },
    { 0x1000, 0x1021 },
    { 0x1023, 0x1027 },
    { 0x1029, 0x102a },
    { 0x102c, 0x1032 },
    { 0x1036, 0x1039 },
    { 0x1040, 0x1059 },
    { 0x10a0, 0x10c5 },
    { 0x10d0, 0x10f8 },
    { 0x10fb, 0x10fb },
    { 0x1100, 0x1159 },
    { 0x115f, 0x11a2 },
    { 0x11a8, 0x11f9 },
    { 0x1200, 0x1206 },
    { 0x1208, 0x1246 },
    { 0x1248, 0x1248 },
    { 0x124a, 0x124d },
    { 0x1250, 0x1256 },
    { 0x1258, 0x1258 },
    { 0x125a, 0x125d },
    { 0x1260, 0x1286 },
    { 0x1288, 0x1288 },
    { 0x128a, 0x128d },
    { 0x1290, 0x12ae },
    { 0x12b0, 0x12b0 },
    { 0x12b2, 0x12b5 },
    { 0x12b8, 0x12be },
    { 0x12c0, 0x12c0 },
    { 0x12c2, 0x12c5 },
    { 0x12c8, 0x12ce },
    { 0x12d0, 0x12d6 },
    { 0x12d8, 0x12ee },
    { 0x12f0, 0x130e },
    { 0x1310, 0x1310 },
    { 0x1312, 0x1315 },
    { 0x1318, 0x131e },
    { 0x1320, 0x1346 },
    { 0x1348, 0x135a },
    { 0x1361, 0x137c },
    { 0x13a0, 0x13f4 },
    { 0x1401, 0x1676 },
    { 0x1680, 0x169c },
    { 0x16a0, 0x16f0 },
    { 0x1700, 0x170c },
    { 0x170e, 0x1714 },
    { 0x1720, 0x1736 },
    { 0x1740, 0x1753 },
    { 0x1760, 0x176c },
    { 0x176e, 0x1770 },
    { 0x1772, 0x1773 },
    { 0x1780, 0x17dc },
    { 0x17e0, 0x17e9 },
    { 0x1800, 0x180e },
    { 0x1810, 0x1819 },
    { 0x1820, 0x1877 },
    { 0x1880, 0x18a9 },
    { 0x1e00, 0x1e9b },
    { 0x1ea0, 0x1ef9 },
    { 0x1f00, 0x1f15 },
    { 0x1f18, 0x1f1d },
    { 0x1f20, 0x1f45 },
    { 0x1f48, 0x1f4d },
    { 0x1f50, 0x1f57 },
    { 0x1f59, 0x1f59 },
    { 0x1f5b, 0x1f5b },
    { 0x1f5d, 0x1f5d },
    { 0x1f5f, 0x1f7d },
    { 0x1f80, 0x1fb4 },
    { 0x1fb6, 0x1fc4 },
    { 0x1fc6, 0x1fd3 },
    { 0x1fd6, 0x1fdb },
    { 0x1fdd, 0x1fef },
    { 0x1ff2, 0x1ff4 },
    { 0x1ff6, 0x1ffe },
    { 0x2000, 0x2027 },
    { 0x202a, 0x2052 },
    { 0x2057, 0x2057 },
    { 0x205f, 0x2063 },
    { 0x206a, 0x2071 },
    { 0x2074, 0x208e },
    { 0x20a0, 0x20b1 },
    { 0x20d0, 0x20ea },
    { 0x2100, 0x213a },
    { 0x213d, 0x214b },
    { 0x2153, 0x2183 },
    { 0x2190, 0x23ce },
    { 0x2400, 0x2426 },
    { 0x2440, 0x244a },
    { 0x2460, 0x24fe },
    { 0x2500, 0x2613 },
    { 0x2616, 0x2617 },
    { 0x2619, 0x267d },
    { 0x2680, 0x2689 },
    { 0x2701, 0x2704 },
    { 0x2706, 0x2709 },
    { 0x270c, 0x2727 },
    { 0x2729, 0x274b },
    { 0x274d, 0x274d },
    { 0x274f, 0x2752 },
    { 0x2756, 0x2756 },
    { 0x2758, 0x275e },
    { 0x2761, 0x2794 },
    { 0x2798, 0x27af },
    { 0x27b1, 0x27be },
    { 0x27d0, 0x27eb },
    { 0x27f0, 0x2aff },
    { 0x2e80, 0x2e99 },
    { 0x2e9b, 0x2ef3 },
    { 0x2f00, 0x2fd5 },
    { 0x2ff0, 0x2ffb },
    { 0x3000, 0x303f },
    { 0x3041, 0x3096 },
    { 0x3099, 0x30ff },
    { 0x3105, 0x312c },
    { 0x3131, 0x318e },
    { 0x3190, 0x31b7 },
    { 0x31f0, 0x321c },
    { 0x3220, 0x3243 },
    { 0x3251, 0x327b },
    { 0x327f, 0x32cb },
    { 0x32d0, 0x32fe },
    { 0x3300, 0x3376 },
    { 0x337b, 0x33dd },
    { 0x33e0, 0x33fe },
    { 0x3400, 0x4db5 },
    { 0x4e00, 0x9fa5 },
    { 0xa000, 0xa48c },
    { 0xa490, 0xa4c6 },
    { 0xac00, 0xd7a3 },
    { 0xe000, 0xfa2d },
    { 0xfa30, 0xfa6a },
    { 0xfb00, 0xfb06 },
    { 0xfb13, 0xfb17 },
    { 0xfb1d, 0xfb36 },
    { 0xfb38, 0xfb3c },
    { 0xfb3e, 0xfb3e },
    { 0xfb40, 0xfb41 },
    { 0xfb43, 0xfb44 },
    { 0xfb46, 0xfbb1 },
    { 0xfbd3, 0xfd3f },
    { 0xfd50, 0xfd8f },
    { 0xfd92, 0xfdc7 },
    { 0xfdf0, 0xfdfc },
    { 0xfe00, 0xfe0f },
    { 0xfe20, 0xfe23 },
    { 0xfe30, 0xfe46 },
    { 0xfe49, 0xfe52 },
    { 0xfe54, 0xfe66 },
    { 0xfe68, 0xfe6b },
    { 0xfe70, 0xfe74 },
    { 0xfe76, 0xfefc },
    { 0xfeff, 0xfeff },
    { 0xff01, 0xffbe },
    { 0xffc2, 0xffc7 },
    { 0xffca, 0xffcf },
    { 0xffd2, 0xffd7 },
    { 0xffda, 0xffdc },
    { 0xffe0, 0xffe6 },
    { 0xffe8, 0xffee },
    { 0xfff9, 0xfffd },
    { 0x10300, 0x1031e },
    { 0x10320, 0x10323 },
    { 0x10330, 0x1034a },
    { 0x10400, 0x10425 },
    { 0x10428, 0x1044d },
    { 0x1d000, 0x1d0f5 },
    { 0x1d100, 0x1d126 },
    { 0x1d12a, 0x1d1dd },
    { 0x1d400, 0x1d454 },
    { 0x1d456, 0x1d49c },
    { 0x1d49e, 0x1d49f },
    { 0x1d4a2, 0x1d4a2 },
    { 0x1d4a5, 0x1d4a6 },
    { 0x1d4a9, 0x1d4ac },
    { 0x1d4ae, 0x1d4b9 },
    { 0x1d4bb, 0x1d4bb },
    { 0x1d4bd, 0x1d4c0 },
    { 0x1d4c2, 0x1d4c3 },
    { 0x1d4c5, 0x1d505 },
    { 0x1d507, 0x1d50a },
    { 0x1d50d, 0x1d514 },
    { 0x1d516, 0x1d51c },
    { 0x1d51e, 0x1d539 },
    { 0x1d53b, 0x1d53e },
    { 0x1d540, 0x1d544 },
    { 0x1d546, 0x1d546 },
    { 0x1d54a, 0x1d550 },
    { 0x1d552, 0x1d6a3 },
    { 0x1d6a8, 0x1d7c9 },
    { 0x1d7ce, 0x1d7ff },
    { 0x20000, 0x2a6d6 },
    { 0x2f800, 0x2fa1d },
    { 0xe0001, 0xe0001 },
    { 0xe0020, 0xe007f },
    { 0xf0000, 0xffffd },
    { 0x100000, 0x10fffd }
};
static const int table_wprint_count =
    (sizeof(table_wprint)/sizeof(struct interval));

/* ------------------- iswpunct -------------------- */
/* Defined in the C99 standard as

   'any printing wide character that is one of a localespecific set of
   punctuation wide characters for which neither iswspace nor iswalnum is
   true'

   Something like uniset +cat=Pc +cat=Pd +cat=Ps +cat=Pe +cat=Pi +cat=Pf +cat=Po +cat=Sm +cat=Sc +cat=Sk +cat=So +00AD c

   glibc has

        # The traditional POSIX definition of punctuation is every graphic,
        # non-alphanumeric character.
        return (is_graph(code_point)
                and not is_alpha(code_point)
                and not is_digit(code_point))

   PCRE has

      Punctuation: all Unicode punctuation, plus ASCII characters that
      Unicode treats as symbols rather than punctuation, for Perl
      compatibility (these are $+<=>^`|~).
*/
static const struct interval table_wpunct[] = {
    { 0x21, 0x2f }, // includes $ & + 
    { 0x3a, 0x40 },
    { 0x5b, 0x60 },
    { 0x7b, 0x7e },
    { 0xa1, 0xa9 }, // a0 is a space, which glibc includes
    { 0xab, 0xb1 }, // glibc includes b2 and b3 (superscript 2 and 3)
    { 0xb4, 0xb4 },
    { 0xb6, 0xb9 },
    { 0xbb, 0xbf },
    { 0xd7, 0xd7 },
    { 0xf7, 0xf7 },
//    { 0x2b9, 0x2ba }, // glibc does not have these
    { 0x2c2, 0x2cf },
    { 0x2d2, 0x2df },
    { 0x2e5, 0x2ed },
    { 0x300, 0x344 },
    { 0x346, 0x34f },
    { 0x360, 0x36f },
    { 0x374, 0x375 },
    { 0x37e, 0x37e },
    { 0x384, 0x385 },
    { 0x387, 0x387 },
    { 0x3f6, 0x3f6 },
    { 0x482, 0x486 },
    { 0x488, 0x489 },
    { 0x55a, 0x55f },
    { 0x589, 0x58a },
    { 0x591, 0x5a1 },
    { 0x5a3, 0x5b9 },
    { 0x5bb, 0x5c4 },
    { 0x5f3, 0x5f4 },
    { 0x60c, 0x60c },
    { 0x61b, 0x61b },
    { 0x61f, 0x61f },
    { 0x64b, 0x655 },
    { 0x66a, 0x66d },
    { 0x670, 0x670 },
    { 0x6d4, 0x6d4 },
    { 0x6d6, 0x6e4 },
    { 0x6e7, 0x6ed },
    { 0x6fd, 0x6fe },
    { 0x700, 0x70d },
    { 0x70f, 0x70f },
    { 0x711, 0x711 },
    { 0x730, 0x74a },
    { 0x7a6, 0x7b0 },
    { 0x901, 0x903 },
    { 0x93c, 0x93c },
    { 0x93e, 0x94d },
    { 0x951, 0x954 },
    { 0x962, 0x965 },
    { 0x970, 0x970 },
    { 0x981, 0x983 },
    { 0x9bc, 0x9bc },
    { 0x9be, 0x9c4 },
    { 0x9c7, 0x9c8 },
    { 0x9cb, 0x9cd },
    { 0x9d7, 0x9d7 },
    { 0x9e2, 0x9e3 },
    { 0x9f2, 0x9fa },
    { 0xa02, 0xa02 },
    { 0xa3c, 0xa3c },
    { 0xa3e, 0xa42 },
    { 0xa47, 0xa48 },
    { 0xa4b, 0xa4d },
    { 0xa70, 0xa71 },
    { 0xa81, 0xa83 },
    { 0xabc, 0xabc },
    { 0xabe, 0xac5 },
    { 0xac7, 0xac9 },
    { 0xacb, 0xacd },
    { 0xb01, 0xb03 },
    { 0xb3c, 0xb3c },
    { 0xb3e, 0xb43 },
    { 0xb47, 0xb48 },
    { 0xb4b, 0xb4d },
    { 0xb56, 0xb57 },
    { 0xb70, 0xb70 },
    { 0xb82, 0xb82 },
    { 0xbbe, 0xbc2 },
    { 0xbc6, 0xbc8 },
    { 0xbca, 0xbcd },
    { 0xbd7, 0xbd7 },
    { 0xbf0, 0xbf2 },
    { 0xc01, 0xc03 },
    { 0xc3e, 0xc44 },
    { 0xc46, 0xc48 },
    { 0xc4a, 0xc4d },
    { 0xc55, 0xc56 },
    { 0xc82, 0xc83 },
    { 0xcbe, 0xcc4 },
    { 0xcc6, 0xcc8 },
    { 0xcca, 0xccd },
    { 0xcd5, 0xcd6 },
    { 0xd02, 0xd03 },
    { 0xd3e, 0xd43 },
    { 0xd46, 0xd48 },
    { 0xd4a, 0xd4d },
    { 0xd57, 0xd57 },
    { 0xd82, 0xd83 },
    { 0xdca, 0xdca },
    { 0xdcf, 0xdd4 },
    { 0xdd6, 0xdd6 },
    { 0xdd8, 0xddf },
    { 0xdf2, 0xdf4 },
    { 0xe2f, 0xe2f },
    { 0xe3f, 0xe3f },
    { 0xe46, 0xe46 },
    { 0xe4f, 0xe4f },
    { 0xe5a, 0xe5b },
    { 0xeb1, 0xeb1 },
    { 0xeb4, 0xeb9 },
    { 0xebb, 0xebc },
    { 0xec8, 0xecd },
    { 0xf01, 0xf1f },
    { 0xf2a, 0xf3f },
    { 0xf71, 0xf87 },
    { 0xf90, 0xf97 },
    { 0xf99, 0xfbc },
    { 0xfbe, 0xfcc },
    { 0xfcf, 0xfcf },
    { 0x102c, 0x1032 },
    { 0x1036, 0x1039 },
    { 0x104a, 0x104f },
    { 0x1056, 0x1059 },
    { 0x10fb, 0x10fb },
    { 0x1361, 0x1368 },
    { 0x1372, 0x137c },
    { 0x166d, 0x166e },
    { 0x169b, 0x169c },
    { 0x16eb, 0x16ed },
    { 0x1712, 0x1714 },
    { 0x1732, 0x1736 },
    { 0x1752, 0x1753 },
    { 0x1772, 0x1773 },
    { 0x17b4, 0x17d6 },
    { 0x17d8, 0x17db },
    { 0x1800, 0x180e },
    { 0x18a9, 0x18a9 },
    { 0x1fbd, 0x1fbd },
    { 0x1fbf, 0x1fc1 },
    { 0x1fcd, 0x1fcf },
    { 0x1fdd, 0x1fdf },
    { 0x1fed, 0x1fef },
    { 0x1ffd, 0x1ffe },
    { 0x2007, 0x2007 },
    { 0x200c, 0x2027 },
    { 0x202a, 0x2052 },
    { 0x2057, 0x2057 },
    { 0x2060, 0x2063 },
    { 0x206a, 0x2070 },
    { 0x2074, 0x207e },
    { 0x2080, 0x208e },
    { 0x20a0, 0x20b1 },
    { 0x20d0, 0x20ea },
    { 0x2100, 0x2101 },
    { 0x2103, 0x2106 },
    { 0x2108, 0x2109 },
    { 0x2114, 0x2114 },
    { 0x2116, 0x2118 },
    { 0x211e, 0x2123 },
    { 0x2125, 0x2125 },
    { 0x2127, 0x2127 },
    { 0x212e, 0x212e },
    { 0x2132, 0x2132 },
    { 0x213a, 0x213a },
    { 0x2140, 0x2144 },
    { 0x214a, 0x214b },
    { 0x2153, 0x215f },
    { 0x2190, 0x23ce },
    { 0x2400, 0x2426 },
    { 0x2440, 0x244a },
    { 0x2460, 0x249b },
    { 0x24ea, 0x24fe },
    { 0x2500, 0x2613 },
    { 0x2616, 0x2617 },
    { 0x2619, 0x267d },
    { 0x2680, 0x2689 },
    { 0x2701, 0x2704 },
    { 0x2706, 0x2709 },
    { 0x270c, 0x2727 },
    { 0x2729, 0x274b },
    { 0x274d, 0x274d },
    { 0x274f, 0x2752 },
    { 0x2756, 0x2756 },
    { 0x2758, 0x275e },
    { 0x2761, 0x2794 },
    { 0x2798, 0x27af },
    { 0x27b1, 0x27be },
    { 0x27d0, 0x27eb },
    { 0x27f0, 0x2aff },
    { 0x2e80, 0x2e99 },
    { 0x2e9b, 0x2ef3 },
    { 0x2f00, 0x2fd5 },
    { 0x2ff0, 0x2ffb },
    { 0x3001, 0x3004 },
    { 0x3008, 0x3020 },
    { 0x302a, 0x3030 },
    { 0x3036, 0x3037 },
    { 0x303d, 0x303f },
    { 0x3099, 0x309c },
    { 0x30a0, 0x30a0 },
    { 0x30fb, 0x30fb },
    { 0x3190, 0x319f },
    { 0x3200, 0x321c },
    { 0x3220, 0x3243 },
    { 0x3251, 0x327b },
    { 0x327f, 0x32cb },
    { 0x32d0, 0x32fe },
    { 0x3300, 0x3376 },
    { 0x337b, 0x33dd },
    { 0x33e0, 0x33fe },
    { 0xa490, 0xa4c6 },
    { 0xe000, 0xf8ff },
    { 0xfb1e, 0xfb1e },
    { 0xfb29, 0xfb29 },
    { 0xfd3e, 0xfd3f },
    { 0xfdfc, 0xfdfc },
    { 0xfe00, 0xfe0f },
    { 0xfe20, 0xfe23 },
    { 0xfe30, 0xfe44 },
    { 0xfe45, 0xfe48 }, // added for R 4.1.0
    { 0xfe49, 0xfe52 },
    { 0xfe54, 0xfe66 },
    { 0xfe68, 0xfe6b },
    { 0xfeff, 0xfeff },
    { 0xff01, 0xff0f },
    { 0xff1a, 0xff20 },
    { 0xff3b, 0xff40 },
    { 0xff5b, 0xff65 },
    { 0xffe0, 0xffe6 },
    { 0xffe8, 0xffee },
    { 0xfff9, 0xfffd },
    { 0x10320, 0x10323 },
    { 0x1d000, 0x1d0f5 },
    { 0x1d100, 0x1d126 },
    { 0x1d12a, 0x1d1dd },
    { 0x1d6c1, 0x1d6c1 },
    { 0x1d6db, 0x1d6db },
    { 0x1d6fb, 0x1d6fb },
    { 0x1d715, 0x1d715 },
    { 0x1d735, 0x1d735 },
    { 0x1d74f, 0x1d74f },
    { 0x1d76f, 0x1d76f },
    { 0x1d789, 0x1d789 },
    { 0x1d7a9, 0x1d7a9 },
    { 0x1d7c3, 0x1d7c3 },
    { 0xe0001, 0xe0001 }, // tag
    { 0xe0020, 0xe007f }, // tags
    { 0xf0000, 0xffffd }, // private use
    { 0x100000, 0x10fffd } // private use
};
static const int table_wpunct_count =
    (sizeof(table_wpunct)/sizeof(struct interval));

/* ------------------- iswspace -------------------- */
/* Defined in the C99 standard as

   'any wide character that corresponds to a locale-specific set of
   white-space wide characters for which none of iswalnum, iswgraph,
   or iswpunct is true.'

   Differs from iswblank in adding { 0xa, 0xd }, { 0x2028, 0x2029 }

   There is also Unicode's PropList.txt, which includes U+0085,2000..200A,202F
   so this was changed for R 4.1.0

   Something like uniset +cat=Zs +cat=Zl +cat=Zp c
   but glibc has 'without mention of "<noBreak>"', hence a0, 2007, 202f.
*/
static const struct interval table_wspace[] = {
    { 0x9, 0xd }, /* tab, LF, vtab, FF, CR */
    { 0x20, 0x20 },
//    { 0xa0, 0xa0 }, /* non-breaking space, omitted by glibc */
    { 0x1680, 0x1680 }, /* ogham space mark */
    { 0x2000, 0x2006 }, /* not figure space, 2007? */
    { 0x2008, 0x200a }, /* not zero-width-space, 200b */
    { 0x2028, 0x2029 }, /* line separator, para separator */
//    { 0x202f, 0x202f }, /* narrow no-break space, omitted by glibc */
    { 0x205f, 0x205f }, /* medium mathematical space */
    { 0x3000, 0x3000 }  /* (CJK) ideographic space */
};
static const int table_wspace_count =
    (sizeof(table_wspace)/sizeof(struct interval));

/* ------------------- iswupper -------------------- */
/* Defined in the C99 standard as

   'an uppercase letter or is one of a locale-specific set of wide
   characters for which none of iswcntrl, iswdigit, iswpunct, or
   iswspace is true.'

   uniset +cat=Lu c
*/
static const struct interval table_wupper[] = {
    { 0x41, 0x5a },
    { 0xc0, 0xd6 },
    { 0xd8, 0xde },
    { 0x100, 0x100 },
    { 0x102, 0x102 },
    { 0x104, 0x104 },
    { 0x106, 0x106 },
    { 0x108, 0x108 },
    { 0x10a, 0x10a },
    { 0x10c, 0x10c },
    { 0x10e, 0x10e },
    { 0x110, 0x110 },
    { 0x112, 0x112 },
    { 0x114, 0x114 },
    { 0x116, 0x116 },
    { 0x118, 0x118 },
    { 0x11a, 0x11a },
    { 0x11c, 0x11c },
    { 0x11e, 0x11e },
    { 0x120, 0x120 },
    { 0x122, 0x122 },
    { 0x124, 0x124 },
    { 0x126, 0x126 },
    { 0x128, 0x128 },
    { 0x12a, 0x12a },
    { 0x12c, 0x12c },
    { 0x12e, 0x12e },
    { 0x130, 0x130 },
    { 0x132, 0x132 },
    { 0x134, 0x134 },
    { 0x136, 0x136 },
    { 0x139, 0x139 },
    { 0x13b, 0x13b },
    { 0x13d, 0x13d },
    { 0x13f, 0x13f },
    { 0x141, 0x141 },
    { 0x143, 0x143 },
    { 0x145, 0x145 },
    { 0x147, 0x147 },
    { 0x14a, 0x14a },
    { 0x14c, 0x14c },
    { 0x14e, 0x14e },
    { 0x150, 0x150 },
    { 0x152, 0x152 },
    { 0x154, 0x154 },
    { 0x156, 0x156 },
    { 0x158, 0x158 },
    { 0x15a, 0x15a },
    { 0x15c, 0x15c },
    { 0x15e, 0x15e },
    { 0x160, 0x160 },
    { 0x162, 0x162 },
    { 0x164, 0x164 },
    { 0x166, 0x166 },
    { 0x168, 0x168 },
    { 0x16a, 0x16a },
    { 0x16c, 0x16c },
    { 0x16e, 0x16e },
    { 0x170, 0x170 },
    { 0x172, 0x172 },
    { 0x174, 0x174 },
    { 0x176, 0x176 },
    { 0x178, 0x179 },
    { 0x17b, 0x17b },
    { 0x17d, 0x17d },
    { 0x181, 0x182 },
    { 0x184, 0x184 },
    { 0x186, 0x187 },
    { 0x189, 0x18b },
    { 0x18e, 0x191 },
    { 0x193, 0x194 },
    { 0x196, 0x198 },
    { 0x19c, 0x19d },
    { 0x19f, 0x1a0 },
    { 0x1a2, 0x1a2 },
    { 0x1a4, 0x1a4 },
    { 0x1a6, 0x1a7 },
    { 0x1a9, 0x1a9 },
    { 0x1ac, 0x1ac },
    { 0x1ae, 0x1af },
    { 0x1b1, 0x1b3 },
    { 0x1b5, 0x1b5 },
    { 0x1b7, 0x1b8 },
    { 0x1bc, 0x1bc },
    { 0x1c4, 0x1c5 },
    { 0x1c7, 0x1c8 },
    { 0x1ca, 0x1cb },
    { 0x1cd, 0x1cd },
    { 0x1cf, 0x1cf },
    { 0x1d1, 0x1d1 },
    { 0x1d3, 0x1d3 },
    { 0x1d5, 0x1d5 },
    { 0x1d7, 0x1d7 },
    { 0x1d9, 0x1d9 },
    { 0x1db, 0x1db },
    { 0x1de, 0x1de },
    { 0x1e0, 0x1e0 },
    { 0x1e2, 0x1e2 },
    { 0x1e4, 0x1e4 },
    { 0x1e6, 0x1e6 },
    { 0x1e8, 0x1e8 },
    { 0x1ea, 0x1ea },
    { 0x1ec, 0x1ec },
    { 0x1ee, 0x1ee },
    { 0x1f1, 0x1f2 },
    { 0x1f4, 0x1f4 },
    { 0x1f6, 0x1f8 },
    { 0x1fa, 0x1fa },
    { 0x1fc, 0x1fc },
    { 0x1fe, 0x1fe },
    { 0x200, 0x200 },
    { 0x202, 0x202 },
    { 0x204, 0x204 },
    { 0x206, 0x206 },
    { 0x208, 0x208 },
    { 0x20a, 0x20a },
    { 0x20c, 0x20c },
    { 0x20e, 0x20e },
    { 0x210, 0x210 },
    { 0x212, 0x212 },
    { 0x214, 0x214 },
    { 0x216, 0x216 },
    { 0x218, 0x218 },
    { 0x21a, 0x21a },
    { 0x21c, 0x21c },
    { 0x21e, 0x21e },
    { 0x220, 0x220 },
    { 0x222, 0x222 },
    { 0x224, 0x224 },
    { 0x226, 0x226 },
    { 0x228, 0x228 },
    { 0x22a, 0x22a },
    { 0x22c, 0x22c },
    { 0x22e, 0x22e },
    { 0x230, 0x230 },
    { 0x232, 0x232 },
    { 0x386, 0x386 },
    { 0x388, 0x38a },
    { 0x38c, 0x38c },
    { 0x38e, 0x38f },
    { 0x391, 0x3a1 },
    { 0x3a3, 0x3ab },
    { 0x3d8, 0x3d8 },
    { 0x3da, 0x3da },
    { 0x3dc, 0x3dc },
    { 0x3de, 0x3de },
    { 0x3e0, 0x3e0 },
    { 0x3e2, 0x3e2 },
    { 0x3e4, 0x3e4 },
    { 0x3e6, 0x3e6 },
    { 0x3e8, 0x3e8 },
    { 0x3ea, 0x3ea },
    { 0x3ec, 0x3ec },
    { 0x3ee, 0x3ee },
    { 0x3f4, 0x3f4 },
    { 0x400, 0x42f },
    { 0x460, 0x460 },
    { 0x462, 0x462 },
    { 0x464, 0x464 },
    { 0x466, 0x466 },
    { 0x468, 0x468 },
    { 0x46a, 0x46a },
    { 0x46c, 0x46c },
    { 0x46e, 0x46e },
    { 0x470, 0x470 },
    { 0x472, 0x472 },
    { 0x474, 0x474 },
    { 0x476, 0x476 },
    { 0x478, 0x478 },
    { 0x47a, 0x47a },
    { 0x47c, 0x47c },
    { 0x47e, 0x47e },
    { 0x480, 0x480 },
    { 0x48a, 0x48a },
    { 0x48c, 0x48c },
    { 0x48e, 0x48e },
    { 0x490, 0x490 },
    { 0x492, 0x492 },
    { 0x494, 0x494 },
    { 0x496, 0x496 },
    { 0x498, 0x498 },
    { 0x49a, 0x49a },
    { 0x49c, 0x49c },
    { 0x49e, 0x49e },
    { 0x4a0, 0x4a0 },
    { 0x4a2, 0x4a2 },
    { 0x4a4, 0x4a4 },
    { 0x4a6, 0x4a6 },
    { 0x4a8, 0x4a8 },
    { 0x4aa, 0x4aa },
    { 0x4ac, 0x4ac },
    { 0x4ae, 0x4ae },
    { 0x4b0, 0x4b0 },
    { 0x4b2, 0x4b2 },
    { 0x4b4, 0x4b4 },
    { 0x4b6, 0x4b6 },
    { 0x4b8, 0x4b8 },
    { 0x4ba, 0x4ba },
    { 0x4bc, 0x4bc },
    { 0x4be, 0x4be },
    { 0x4c1, 0x4c1 },
    { 0x4c3, 0x4c3 },
    { 0x4c5, 0x4c5 },
    { 0x4c7, 0x4c7 },
    { 0x4c9, 0x4c9 },
    { 0x4cb, 0x4cb },
    { 0x4cd, 0x4cd },
    { 0x4d0, 0x4d0 },
    { 0x4d2, 0x4d2 },
    { 0x4d4, 0x4d4 },
    { 0x4d6, 0x4d6 },
    { 0x4d8, 0x4d8 },
    { 0x4da, 0x4da },
    { 0x4dc, 0x4dc },
    { 0x4de, 0x4de },
    { 0x4e0, 0x4e0 },
    { 0x4e2, 0x4e2 },
    { 0x4e4, 0x4e4 },
    { 0x4e6, 0x4e6 },
    { 0x4e8, 0x4e8 },
    { 0x4ea, 0x4ea },
    { 0x4ec, 0x4ec },
    { 0x4ee, 0x4ee },
    { 0x4f0, 0x4f0 },
    { 0x4f2, 0x4f2 },
    { 0x4f4, 0x4f4 },
    { 0x4f6, 0x4f6 }, // missing prior to R 4.1.0
    { 0x4f8, 0x4f8 },
    { 0x500, 0x500 },
    { 0x502, 0x502 },
    { 0x504, 0x504 },
    { 0x506, 0x506 },
    { 0x508, 0x508 },
    { 0x50a, 0x50a },
    { 0x50c, 0x50c },
    { 0x50e, 0x50e },
    { 0x531, 0x556 },
    { 0x1e00, 0x1e00 },
    { 0x1e02, 0x1e02 },
    { 0x1e04, 0x1e04 },
    { 0x1e06, 0x1e06 },
    { 0x1e08, 0x1e08 },
    { 0x1e0a, 0x1e0a },
    { 0x1e0c, 0x1e0c },
    { 0x1e0e, 0x1e0e },
    { 0x1e10, 0x1e10 },
    { 0x1e12, 0x1e12 },
    { 0x1e14, 0x1e14 },
    { 0x1e16, 0x1e16 },
    { 0x1e18, 0x1e18 },
    { 0x1e1a, 0x1e1a },
    { 0x1e1c, 0x1e1c },
    { 0x1e1e, 0x1e1e },
    { 0x1e20, 0x1e20 },
    { 0x1e22, 0x1e22 },
    { 0x1e24, 0x1e24 },
    { 0x1e26, 0x1e26 },
    { 0x1e28, 0x1e28 },
    { 0x1e2a, 0x1e2a },
    { 0x1e2c, 0x1e2c },
    { 0x1e2e, 0x1e2e },
    { 0x1e30, 0x1e30 },
    { 0x1e32, 0x1e32 },
    { 0x1e34, 0x1e34 },
    { 0x1e36, 0x1e36 },
    { 0x1e38, 0x1e38 },
    { 0x1e3a, 0x1e3a },
    { 0x1e3c, 0x1e3c },
    { 0x1e3e, 0x1e3e },
    { 0x1e40, 0x1e40 },
    { 0x1e42, 0x1e42 },
    { 0x1e44, 0x1e44 },
    { 0x1e46, 0x1e46 },
    { 0x1e48, 0x1e48 },
    { 0x1e4a, 0x1e4a },
    { 0x1e4c, 0x1e4c },
    { 0x1e4e, 0x1e4e },
    { 0x1e50, 0x1e50 },
    { 0x1e52, 0x1e52 },
    { 0x1e54, 0x1e54 },
    { 0x1e56, 0x1e56 },
    { 0x1e58, 0x1e58 },
    { 0x1e5a, 0x1e5a },
    { 0x1e5c, 0x1e5c },
    { 0x1e5e, 0x1e5e },
    { 0x1e60, 0x1e60 },
    { 0x1e62, 0x1e62 },
    { 0x1e64, 0x1e64 },
    { 0x1e66, 0x1e66 },
    { 0x1e68, 0x1e68 },
    { 0x1e6a, 0x1e6a },
    { 0x1e6c, 0x1e6c },
    { 0x1e6e, 0x1e6e },
    { 0x1e70, 0x1e70 },
    { 0x1e72, 0x1e72 },
    { 0x1e74, 0x1e74 },
    { 0x1e76, 0x1e76 },
    { 0x1e78, 0x1e78 },
    { 0x1e7a, 0x1e7a },
    { 0x1e7c, 0x1e7c },
    { 0x1e7e, 0x1e7e },
    { 0x1e80, 0x1e80 },
    { 0x1e82, 0x1e82 },
    { 0x1e84, 0x1e84 },
    { 0x1e86, 0x1e86 },
    { 0x1e88, 0x1e88 },
    { 0x1e8a, 0x1e8a },
    { 0x1e8c, 0x1e8c },
    { 0x1e8e, 0x1e8e },
    { 0x1e90, 0x1e90 },
    { 0x1e92, 0x1e92 },
    { 0x1e94, 0x1e94 },
    { 0x1ea0, 0x1ea0 },
    { 0x1ea2, 0x1ea2 },
    { 0x1ea4, 0x1ea4 },
    { 0x1ea6, 0x1ea6 },
    { 0x1ea8, 0x1ea8 },
    { 0x1eaa, 0x1eaa },
    { 0x1eac, 0x1eac },
    { 0x1eae, 0x1eae },
    { 0x1eb0, 0x1eb0 },
    { 0x1eb2, 0x1eb2 },
    { 0x1eb4, 0x1eb4 },
    { 0x1eb6, 0x1eb6 },
    { 0x1eb8, 0x1eb8 },
    { 0x1eba, 0x1eba },
    { 0x1ebc, 0x1ebc },
    { 0x1ebe, 0x1ebe },
    { 0x1ec0, 0x1ec0 },
    { 0x1ec2, 0x1ec2 },
    { 0x1ec4, 0x1ec4 },
    { 0x1ec6, 0x1ec6 },
    { 0x1ec8, 0x1ec8 },
    { 0x1eca, 0x1eca },
    { 0x1ecc, 0x1ecc },
    { 0x1ece, 0x1ece },
    { 0x1ed0, 0x1ed0 },
    { 0x1ed2, 0x1ed2 },
    { 0x1ed4, 0x1ed4 },
    { 0x1ed6, 0x1ed6 },
    { 0x1ed8, 0x1ed8 },
    { 0x1eda, 0x1eda },
    { 0x1edc, 0x1edc },
    { 0x1ede, 0x1ede },
    { 0x1ee0, 0x1ee0 },
    { 0x1ee2, 0x1ee2 },
    { 0x1ee4, 0x1ee4 },
    { 0x1ee6, 0x1ee6 },
    { 0x1ee8, 0x1ee8 },
    { 0x1eea, 0x1eea },
    { 0x1eec, 0x1eec },
    { 0x1eee, 0x1eee },
    { 0x1ef0, 0x1ef0 },
    { 0x1ef2, 0x1ef2 },
    { 0x1ef4, 0x1ef4 },
    { 0x1ef6, 0x1ef6 },
    { 0x1ef8, 0x1ef8 },
    { 0x1f08, 0x1f0f },
    { 0x1f18, 0x1f1d },
    { 0x1f28, 0x1f2f },
    { 0x1f38, 0x1f3f },
    { 0x1f48, 0x1f4d },
    { 0x1f59, 0x1f59 },
    { 0x1f5b, 0x1f5b },
    { 0x1f5d, 0x1f5d },
    { 0x1f5f, 0x1f5f },
    { 0x1f68, 0x1f6f },
    { 0x1f88, 0x1f8f },
    { 0x1f98, 0x1f9f },
    { 0x1fa8, 0x1faf },
    { 0x1fb8, 0x1fbc },
    { 0x1fc8, 0x1fcc },
    { 0x1fd8, 0x1fdb },
    { 0x1fe8, 0x1fec },
    { 0x1ff8, 0x1ffc },
    { 0x2126, 0x2126 },
    { 0x212a, 0x212b },
    { 0x2160, 0x216f },
    { 0x24b6, 0x24cf },
    { 0xff21, 0xff3a },
    { 0x10400, 0x10425 }
};
static const int table_wupper_count =
    (sizeof(table_wupper)/sizeof(struct interval));


/* ------------------- iswxdigit -------------------- */
/* Defined in the C99 standard to be just these */
static const struct interval table_wxdigit[] = {
    { 0x30, 0x39 },
    { 0x41, 0x46 },
    { 0x61, 0x66 }
};
static const int table_wxdigit_count =
    (sizeof(table_wxdigit)/sizeof(struct interval));
